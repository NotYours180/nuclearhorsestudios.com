{
  "name": "spofcheck",
  "description": "A CLI tool for detecting frontend SPOF",
  "version": "0.1.3",
  "keywords": [
    "SPOF",
    "Frontend SPOF",
    "SPOF Check",
    "spofcheck"
  ],
  "main": "./lib/spof.js",
  "homepage": "https://github.com/senthilp/spofcheck/blob/master/README.md",
  "contributors": [
    {
      "name": "Senthil Padmanabhan"
    },
    {
      "name": "Venkat Sundramurthy"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/senthilp/spofcheck"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/senthilp/spofcheck/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "nopt": "2.0.0",
    "request": "2.12.0",
    "async": "0.1.22",
    "jsdom": "0.2.19",
    "jquery": "1.7.2",
    "mkdirp": "0.3.4"
  },
  "devDependencies": {
    "rimraf": "2.0.2"
  },
  "bin": {
    "spofcheck": "./bin/spofcheck"
  },
  "scripts": {
    "test": "node tests/spofcheck.js"
  },
  "readme": " [![Build Status](https://secure.travis-ci.org/senthilp/spofcheck.png?branch=master)](https://travis-ci.org/senthilp/spofcheck)\n##SPOFCheck - Fighting Frontend [SPOF](http://en.wikipedia.org/wiki/Single_point_of_failure) at its root\n\nWith the increase in 3rd party widgets and modernization of web applications, Frontend Single Point Of Failure (SPOF) has \nbecome a critical focus point. Thanks to [Steve Souders](https://twitter.com/souders) for his \n[initial research](http://www.stevesouders.com/blog/2010/06/01/frontend-spof/) \non this topic, we now have a list of common patterns which causes SPOF. The awareness of Frontend SPOF has also increased \ntremendously among engineers, thanks to some of the recent blogs and [articles](http://calendar.perfplanet.com/2012/spof-bug/) \nemphasizing the importance of it.  \n\nThere are already a bunch of utilities and plugins out there which can detect possible SPOF vulnerabilities in a web application. \nThe most notable ones being [webpagetest.org](http://blog.patrickmeenan.com/2011/10/testing-for-frontend-spof.html), \n[SPOF-O-Matic](https://chrome.google.com/webstore/detail/spof-o-matic/plikhggfbplemddobondkeogomgoodeg?hl=en-US) chrome \nplugin and [YSlow 3PO](http://www.phpied.com/3po/) extension. At eBay we wanted to detect SPOF at a very early stage, during\nthe development cycle itself. This means an additional hook in our automated testing pipeline. The solution resulted in \ncreating a simple tool which works on our test URLs and produces SPOF alerts. The tool is **spofcheck**.\n\nspofcheck is a [Command Line Interface](http://en.wikipedia.org/wiki/Command-line_interface) (CLI) built in Node.js to detect \npossible Frontend SPOF for web pages. The output is generated in an XML format\nthat can be consumed and reported by [CI](http://en.wikipedia.org/wiki/Continuous_integration) jobs. The tool is integrated \nwith our secondary jobs, which run daily automation on a testing server where a development branch is deployed. In case of \na SPOF alert, engineers are notified and they act on it accordingly. This process ensures that SPOFs are contained within \nthe development cycle and do not sneak into staging or production. \n\nThanks to github projects [spof-o-matic](https://github.com/pmeenan/spof-o-matic) and [3po](https://github.com/stoyan/yslow), \na lot of the code logic has been re-used here. The design and packaging of the tool is based on [csslint](https://github.com/stubbornella/csslint), \nthanks to [Nicholas Zakas](https://twitter.com/slicknet) and [Nicole Sullivan](https://twitter.com/stubbornella).\n\n##The command line interface\nspofcheck provides a simple command line interface and runs on Node.js \n\nTo install spofcheck run the following\n\n    $ npm install -g spofcheck\n\nTo run spofcheck, use the following format\n\n    spofcheck [options]* [urls]*\n    \n    Options\n    --help | -h                       \t\t     Displays this information.\n    --format=<format> | -f <format>   \t\t     Indicate which format [junit-xml | spof-xml | text] to use for output.\n    --outputdir=<dir> | -o <dir>      \t\t     Outputs the spof results to this directory.\n    --rules=<rule[,rule]+> | -r <rule[,rule]+>   Indicate which rules to include.\n    --print | -p                      \t\t     Outputs the results in console, instead of saving to a file.\n    --quiet | -q                      \t\t     Keeps the console clear from logging.\n\nExample\n\n    $ spofcheck -f junit-xml -o /tests www.ebay.com www.amazon.com\n\n##Rules\nspofcheck by default runs with 5 rules (checks). The rules are maintained in the [rules.js](https://github.com/senthilp/spofcheck/blob/master/lib/rules.js) \nfile. New rules can be easily added by pushing entries to the [rules](https://github.com/senthilp/spofcheck/blob/master/lib/rules.js#L6) \narray or calling the spof api [registerRules](https://github.com/senthilp/spofcheck/blob/master/lib/engine.js#L142). The \ndefault rules come from Souder's original [list](http://www.stevesouders.com/blog/2010/06/01/frontend-spof/) outlined below\n \n1. `3rdparty-scripts` - Always load 3rd party external scripts asyncronously in a non-blocking pattern \n1. `application-js` - Load application JS in a non-blocking pattern or towards the end of page\n1. `fontface-stylesheet` - Try to inline @font-face style. Also make the font files compressed and cacheable\n1. `fontface-inline` - Make sure the fonts files are compressed, cached and small in size\n1. `fontface-inline-precede-script-IE` - Make sure inlined @font-face is not preceded by a SCRIPT tag, causes SPOF in IE\n\n##Output\nspofcheck run creates a file and writes results in one of the below formats\n* `junit-xml` - a format most ci servers can parse, the default format\n* `spof-xml` - an XML format that can be consumed by other utilities\n* `text` - a textual representation of the results\n\nThe format can be specified using the `--format` or `-f` option. For just printing results i.e. no file creation, use the \n`--print` or `-p` option\n\n##Testing\nCurrently tests are written for the Command Line Interface as a whole and not individual modules. The main test file is [spofcheck.js](https://github.com/senthilp/spofcheck/blob/master/tests/spofcheck.js) \nand uses the default Node.js [assert](https://npmjs.org/package/assert) module. To run the tests - clone the [repo](https://github.com/senthilp/spofcheck), \ninstall the package `$ npm install` and run\n\n    $ npm test\n\n##Issues\nHave a bug or a feature request? [Please open a new issue](https://github.com/senthilp/spofcheck/issues)\n\n##Authors\n**Senthil Padmanabhan** - [github](https://github.com/senthilp) | [twitter](https://twitter.com/senthil_hi)\n<br/>\n**Venkat Sundramurthy** - [github](https://github.com/vsundramurthy) | [twitter](https://twitter.com/vsundramurthy)\n\n##License \nCopyright (c) 2012 eBay Inc.\n\nReleased under the MIT License\nhttp://www.opensource.org/licenses/MIT\n",
  "readmeFilename": "README.md",
  "_id": "spofcheck@0.1.3",
  "dist": {
    "shasum": "5d1a9749b2836e2eddfdaedcdd2921bb31ff62ac"
  },
  "_from": "spofcheck@",
  "_resolved": "https://registry.npmjs.org/spofcheck/-/spofcheck-0.1.3.tgz"
}
