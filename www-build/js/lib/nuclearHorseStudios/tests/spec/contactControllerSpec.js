define(["Controllers","MockHttp"],function(controllers,mockHttp){describe("ContactController",function(){function initController(){$scope={},$scope.contactForm={},$scope.contactForm.$valid=!0,contactController=controllers.ContactController($scope,mockHttp)}var $scope,contactController,mockContact;beforeEach(function(){mockContact={name:"Test Name",email:"test@example.com",comment:"This is a comment",type:"contact"}}),it("Has a function attached to $scope called submitContact",function(){initController(),$scope.contact=mockContact,expect($scope.submitContact).toBeDefined()}),it("Calls $http.get with proper url",function(){var postSpy=spyOn(mockHttp,"post").andCallThrough();initController(),$scope.contact=mockContact,$scope.submitContact($scope),expect(postSpy).toHaveBeenCalledWith("http://nuclearhorsestudios.com/contact",mockContact)}),it("Does not call $http.get when contact is invalid",function(){var postSpy=spyOn(mockHttp,"post");initController(),$scope.contact=mockContact,$scope.contactForm.$valid=!1,$scope.submitContact($scope),expect(postSpy).not.toHaveBeenCalled()}),it("Sets $scope.success to true after a successful post",function(){initController(),$scope.successful=!1,$scope.contact=mockContact,$scope.submitContact($scope),expect($scope.successful).toBe(!0)}),it("Sets $scope.success to false after an unscuccessful post",function(){initController(),$scope.successful=!0,mockHttp.successful=!1,$scope.contact=mockContact,$scope.submitContact($scope),mockHttp.successful=!0,expect($scope.successful).toBe(!1)}),it("Sets $scope.isPosting to true while the form is posting",function(){initController(),$scope.contact=mockContact,$scope.successful=!1,$scope.isPosting=!1,spyOn(mockHttp,"success").andCallFake(function(){return expect($scope.isPosting).toBe(!0),$scope.isPosting=!1,mockHttp}),$scope.submitContact($scope)})})});